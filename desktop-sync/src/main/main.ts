import { app, BrowserWindow, ipcMain } from "electron";

import path from "path";
import { resolveHtmlPath } from "./util";
import { createBloomRetriever } from "./bloom";
import * as os from "node:os";
import * as fs from "node:fs";
import * as yaml from "js-yaml";
import { createScanner } from "./scanner";

import { createScanStore } from "./scanstore";

import auth from "./auth";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1024,
    height: 728,
    webPreferences: {
      webSecurity: false, // TODO: remove this
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// ********************** Bloom core logic **********************

// Create a BloomRetriever object
createBloomRetriever().then((bloom_retriever) => {
  ipcMain.handle("bloom:get-people", bloom_retriever.getPeople);
});

// Load config.yaml and create a Scanner object
const homedir = os.homedir();
const config_yaml = path.join(homedir, ".bloom", "desktop-config.yaml");
const config = yaml.load(fs.readFileSync(config_yaml, "utf8")) as {
  python: string;
  capture_scan_py: string;
  scans_dir: string;
  scanner_id: string;
};

const scanner = createScanner(config);
ipcMain.handle("scanner:get-scanner-id", scanner.getScannerId);
ipcMain.handle("scanner:get-person-id", scanner.getPersonId);
ipcMain.on("scanner:set-person-id", async (event, args) => {
  scanner.setPersonId(args[0]);
});
ipcMain.handle("scanner:get-plant-qr-code", scanner.getPlantQrCode);
ipcMain.handle("scanner:set-plant-qr-code", async (event, args) => {
  scanner.setPlantQrCode(args[0]);
});
ipcMain.handle("scanner:get-scan-data", scanner.getScanData);
scanner.onScanUpdate = () => {
  mainWindow?.webContents.send("scanner:scan-update");
};
ipcMain.on("scanner:start-scan", (event, args) => {
  scanner.startScan({
    onCaptureImage: () => {
      event.reply("image-captured");
    },
    onImageSaved: (imagePath: string) => {
      event.reply("image-saved", imagePath);
    },
  });
});

// Create a ScanStore object
createScanStore().then((scanStore) => {
  scanner.onScanComplete = (scan: Scan) => {
    scanStore.addScan(scan);
  };
  ipcMain.handle("scan-store:get-scans", scanStore.getScans);
  ipcMain.handle(
    "scan-store:get-scans-with-email",
    scanStore.getScansWithEmail
  );
  ipcMain.handle("scan-store:get-scan", async (event, args) => {
    return scanStore.getScan(args[0]);
  });
  ipcMain.handle("scan-store:get-scan-with-email", async (event, args) => {
    return scanStore.getScanWithEmail(args[0]);
  });
});

// If no 'scanner:start-scan' event for 5 minutes, emit a 'main:idle' event
let idleTimer: NodeJS.Timeout;
let idleTime = 10 * 60 * 1000;
const resetIdleTimer = () => {
  console.log("resetIdleTimer() called");
  clearTimeout(idleTimer);
  idleTimer = setTimeout(() => {
    console.log("idleTimer expired");
    mainWindow?.webContents.send("main:idle");
    resetIdleTimer();
  }, idleTime);
};
ipcMain.on("scanner:start-scan", (event, args) => {
  resetIdleTimer();
});
ipcMain.on("scanner:set-person-id", (event, args) => {
  resetIdleTimer();
});
resetIdleTimer();

// *************************************************************

// import { LIB_VERSION } from 'electric-sql/version';
// import { makeElectricContext, useLiveQuery } from 'electric-sql/react';
// import { genUUID, uniqueTabId } from 'electric-sql/util';
// import { ElectricDatabase, electrify } from 'electric-sql/wa-sqlite';

// import { Electric, Scans as Scan, schema } from '../generated/client';

import Database from "better-sqlite3";
import { electrify } from "electric-sql/node";

// Import your generated database schema.
import { schema } from "../generated/client";

// Define your config with at least an auth token.
// See Usage -> Authentication for more details.
const electric_config = {
  auth: auth,
};

// Create the better-sqlite3 database connection. The first
// argument is your database name. Changing this will
// create/use a new local database file.
const conn = new Database("/Users/djbutler/.bloom/bloom.db");

// Follow the library recommendation to enable WAL mode to
// increase performance. As per:
// https://github.com/WiseLibs/better-sqlite3/blob/master/docs/performance.md
conn.pragma("journal_mode = WAL");

electrify(conn, schema, electric_config)
  .then(async (electric) => {
    // Use your electrified database here.
    console.log("Connected to the database");
    const { db } = electric;

    db.scans.sync({ include: { phenotypers: true } });

    // Resolves when the shape subscription has been established.
    // const shape = await db.scans.sync({ include: { phenotypers: true } });
    // Resolves when the data has been synced into the local database.
    // await shape.synced;

    // Subscribe to data changes.
    electric.notifier.subscribeToDataChanges((changeNotification) => {
      changeNotification.dbName;
      changeNotification.changes.map((change) => {
        console.log(`table ${change.qualifiedTablename} changed`);
        console.log(`rows ${change.rowids} changed`);
      });
    });

    // set up callbacks
    ipcMain.handle("scans:get-all", async () => {
      const scans = await db.scans.findMany();
      return scans;
    });

    db.phenotypers
      .sync()
      .then(() => {
        db.phenotypers
          .findMany()
          .then((results) => {
            console.log("results from db.phenotypers.findMany() ->");
            console.log(results);
          })
          .catch((err) => {
            console.error("error calling db.phenotypers.findMany() ->");
            console.error(err);
          });
      })
      .catch((err) => {
        console.error("error calling db.phenotypers.sync() ->");
        console.error(err);
      });
  })
  .catch((err) => {
    console.error("error calling electrify(conn, schema, config) ->");
    console.error(err);
  });
